/* Fonts 
================================================== */

$font-family-base: Helvetica, Tahoma, sans-serif;
$font-size-base: 14px;
$font-weight-base: 400;
$letter-spacing: 1px;
$line-height-base: 1.4;

/* Color palette
================================================== */

$red: #EF5250;
$white: #F6F5EE;
$blue: #1C1E4C;

$lightblue: #DDECEB;
$lightgreen: #D7E2D1;
$lightpink: #F6D4C7;

$colors: (
    'red': $red,
    'white': $white,
    'blue': $blue,
    'lightblue': $lightblue,
    'lightgreen': $lightgreen,
    'lightpink': $lightpink,
);

/* Buttons and forms
================================================== */

@mixin btn(
	$color: $white,
	$colorhover: $white,
	$border: $blue,
	$borderhover: $blue,
	$background: $blue,
	$backgroundhover: $blue,
	$pathfill: $white,
	$pathfillhover: $white,
	$borderradius: 0,
	$padding: 15px 24px,
	$fontsize: 1.14rem
) {
	@include transition(
		color 0.5s ease,
		background-color 0.5s ease,
		border 0.5s ease
	);
	width: auto;
	cursor: pointer;
	padding: $padding;
	display: inline-block;
	text-align: center;
	color: $color;
	background: $background;
	border: 1px solid $border;
	line-height: 1;
	border-radius: $borderradius;
	font-weight: 600;
	font-size: $fontsize;
	text-decoration: none;

	svg {
		&:last-child {
			margin-left: 10px;
		}

		path {
			@include transition(fill 0.5s ease);
			fill: $pathfill;
		}
	}

	&:hover {
		background-color: $backgroundhover;
		color: $colorhover;
		border: 1px solid $borderhover;

		svg path {
			fill: $pathfillhover;
		}
	}
}

@mixin input-placeholder {
	&.placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
	&::-webkit-input-placeholder {
		@content;
	}
}

/* Flexbox 
================================================== */

@mixin flex($align: flex-start, $wrap: wrap) {
	// align flex-start, center, flex-end
	display: flex;
	flex-wrap: $wrap;
	align-items: $align;

	& > div,
	& > li {
		float: left;
	}

	&:after {
		clear: both;
		content: " ";
		display: block;
		height: 0;
		line-height: 0;
		visibility: hidden;
	}
}

@mixin flexWidth($args...) {
	width: $args;
	max-width: $args;
	flex-basis: $args;
}

/* Transitions and animations
================================================== */

@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}

@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}

@mixin animation($str) {
	-webkit-animation: #{$str};
	-moz-animation: #{$str};
	-ms-animation: #{$str};
	-o-animation: #{$str};
	animation: #{$str};
}

/* Visibility
================================================== */

@mixin hidden {
	opacity: 0;
	visibility: hidden;
	pointer-events: none;
}

@mixin visible {
	opacity: 1;
	visibility: visible;
	pointer-events: auto;
}

/* Media queries
================================================== */

$width-queries: (
	"xxs": "450px",
	"xs": "600px",
	// Small tablets and large smartphones (landscape view)
	"sm": "768px",
	// Small tablets (portrait view)
	"md": "992px",
	// Tablets and small desktops
	"md2": "1200px",
	// Tablets and small desktops
	"lg": "1400px",
	// Large tablets and desktops
	"xl": "1900px",
	// Large desktops
	"xxl": "2000px",
	// Extra large desktops
);

@mixin mq($width: "xs", $orientation: "") {
	$query_width: map-get($width-queries, $width);

	@if $query_width == null {
		@error "Wrong width: #{$width}";
	}

	@if $orientation != "portrait" AND $orientation != "landscape" AND $orientation != "" {
		@error "Wrong orientation: #{$orientation}";
	}

	@if $orientation != "" {
		@if $width == "xl" or $width == "xxl" {
			@media screen and (min-width: #{$query_width}) and (orientation: #{$orientation}) {
				@content;
			}
		} @else {
			@media screen and (max-width: #{$query_width}) and (orientation: #{$orientation}) {
				@content;
			}
		}
	} @else {
		@if $width == "xl" or $width == "xxl" {
			@media screen and (min-width: #{$query_width}) {
				@content;
			}
		} @else {
			@media screen and (max-width: #{$query_width}) {
				@content;
			}
		}
	}
}

// Custom devices
@mixin min-mq($screen) {
	@media screen and (min-width: $screen+"px") {
		@content;
	}
}

@mixin max-mq($screen) {
	@media screen and (max-width: $screen+"px") {
		@content;
	}
}

/* Other mixins and extends
================================================== */

@mixin sideMargin($val: auto) {
	margin: {
		left: $val;
		right: $val;
	}
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
	content: $content;
	display: $display;
	position: $pos;
}

%sr-only {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute !important;
	top: 0;
	left: 0;
}

%cover-img {
	background-position: center center;
	background-size: cover;
	background-repeat: no-repeat;
}

/* CONTAINER SIZES
================================================== */

%container_common {
	@include sideMargin;

	@include mq("sm") {
		padding-left: 30px;
		padding-right: 30px;
	}

	@include mq("xs") {
		padding-left: 20px;
		padding-right: 20px;
	}
}

%container_default {
	width: 45.6%;

	@include mq("xs") {
		width: 100%;
	}
}
%container_medium {
	width: 66.69%;

	@include mq("sm") {
		width: 100%;
	}
}

%container_large {
	width: 83.38%;

	@include mq("sm") {
		width: 100%;
	}
}